// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2017 02:15:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [31:0] reg0;
wire [31:0] reg1;
wire [31:0] reg2;
wire [31:0] reg3;
wire [31:0] reg4;
wire [31:0] reg5;
wire [31:0] reg6;
wire [31:0] reg7;
wire [31:0] reg8;
wire [31:0] reg9;
wire [31:0] reg10;
wire [31:0] reg11;
wire [31:0] reg12;
wire [31:0] reg13;
wire [31:0] reg14;
wire [31:0] reg15;
wire [31:0] reg16;
wire [31:0] reg17;
wire [31:0] reg18;
wire [31:0] reg19;
wire [31:0] reg20;
wire [31:0] reg21;
wire [31:0] reg22;
wire [31:0] reg23;
wire [31:0] reg24;
wire [31:0] reg25;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reg0(reg0),
	.reg1(reg1),
	.reg2(reg2),
	.reg3(reg3),
	.reg4(reg4),
	.reg5(reg5),
	.reg6(reg6),
	.reg7(reg7),
	.reg8(reg8),
	.reg9(reg9),
	.reg10(reg10),
	.reg11(reg11),
	.reg12(reg12),
	.reg13(reg13),
	.reg14(reg14),
	.reg15(reg15),
	.reg16(reg16),
	.reg17(reg17),
	.reg18(reg18),
	.reg19(reg19),
	.reg20(reg20),
	.reg21(reg21),
	.reg22(reg22),
	.reg23(reg23),
	.reg24(reg24),
	.reg25(reg25)
);
initial 
begin 
#100000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
endmodule

