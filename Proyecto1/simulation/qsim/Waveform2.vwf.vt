// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2017 19:28:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          prueba
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module prueba_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] num;
// wires                                               
wire [3:0] centena;
wire [3:0] decimal;
wire [3:0] unidad;

// assign statements (if any)                          
prueba i1 (
// port map - connection between master ports and signals/registers   
	.centena(centena),
	.decimal(decimal),
	.num(num),
	.unidad(unidad)
);
initial 
begin 
#100000000 $finish;
end 
// num[ 31 ]
initial
begin
	num[31] = 1'b0;
end 
// num[ 30 ]
initial
begin
	num[30] = 1'b0;
end 
// num[ 29 ]
initial
begin
	num[29] = 1'b0;
end 
// num[ 28 ]
initial
begin
	num[28] = 1'b0;
end 
// num[ 27 ]
initial
begin
	num[27] = 1'b0;
end 
// num[ 26 ]
initial
begin
	num[26] = 1'b0;
end 
// num[ 25 ]
initial
begin
	num[25] = 1'b0;
end 
// num[ 24 ]
initial
begin
	num[24] = 1'b0;
end 
// num[ 23 ]
initial
begin
	num[23] = 1'b0;
end 
// num[ 22 ]
initial
begin
	num[22] = 1'b0;
end 
// num[ 21 ]
initial
begin
	num[21] = 1'b0;
end 
// num[ 20 ]
initial
begin
	num[20] = 1'b0;
end 
// num[ 19 ]
initial
begin
	num[19] = 1'b0;
end 
// num[ 18 ]
initial
begin
	num[18] = 1'b0;
end 
// num[ 17 ]
initial
begin
	num[17] = 1'b0;
end 
// num[ 16 ]
initial
begin
	num[16] = 1'b0;
end 
// num[ 15 ]
initial
begin
	num[15] = 1'b0;
end 
// num[ 14 ]
initial
begin
	num[14] = 1'b0;
end 
// num[ 13 ]
initial
begin
	num[13] = 1'b0;
end 
// num[ 12 ]
initial
begin
	num[12] = 1'b0;
end 
// num[ 11 ]
initial
begin
	num[11] = 1'b0;
end 
// num[ 10 ]
initial
begin
	num[10] = 1'b0;
end 
// num[ 9 ]
initial
begin
	num[9] = 1'b0;
end 
// num[ 8 ]
initial
begin
	num[8] = 1'b0;
end 
// num[ 7 ]
initial
begin
	num[7] = 1'b0;
end 
// num[ 6 ]
initial
begin
	num[6] = 1'b0;
end 
// num[ 5 ]
initial
begin
	num[5] = 1'b0;
	num[5] = #64000000 1'b1;
end 
// num[ 4 ]
initial
begin
	num[4] = 1'b0;
	num[4] = #32000000 1'b1;
	num[4] = #32000000 1'b0;
	num[4] = #32000000 1'b1;
end 
// num[ 3 ]
initial
begin
	repeat(3)
	begin
		num[3] = 1'b0;
		num[3] = #16000000 1'b1;
		# 16000000;
	end
	num[3] = 1'b0;
end 
// num[ 2 ]
initial
begin
	repeat(6)
	begin
		num[2] = 1'b0;
		num[2] = #8000000 1'b1;
		# 8000000;
	end
	num[2] = 1'b0;
end 
// num[ 1 ]
initial
begin
	repeat(12)
	begin
		num[1] = 1'b0;
		num[1] = #4000000 1'b1;
		# 4000000;
	end
	num[1] = 1'b0;
end 
// num[ 0 ]
always
begin
	num[0] = 1'b0;
	num[0] = #2000000 1'b1;
	#2000000;
end 
endmodule

