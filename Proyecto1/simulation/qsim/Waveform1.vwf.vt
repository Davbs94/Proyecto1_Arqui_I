// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2017 12:53:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [31:0] DatoMWBOUT;
wire [4:0] DirRegAIFDOUT;
wire [4:0] DirRegBIFDOUT;
wire [4:0] DirWriteIFDOUT;
wire [4:0] DirWriteMWBOUT;
wire [31:0] DireccionIFDOUT;
wire [31:0] InmCorrimIFDOUT;
wire [4:0] OpCodeIFDOUT;
wire WriteRegMWBOUT;
wire crtlMuxDireccionPC;
wire [31:0] inst;
wire [31:0] newpc;
wire [31:0] pcout;
wire [31:0] reg0;
wire [31:0] reg1;
wire [31:0] reg2;
wire [31:0] reg3;
wire [31:0] reg4;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.DatoMWBOUT(DatoMWBOUT),
	.DirRegAIFDOUT(DirRegAIFDOUT),
	.DirRegBIFDOUT(DirRegBIFDOUT),
	.DirWriteIFDOUT(DirWriteIFDOUT),
	.DirWriteMWBOUT(DirWriteMWBOUT),
	.DireccionIFDOUT(DireccionIFDOUT),
	.InmCorrimIFDOUT(InmCorrimIFDOUT),
	.OpCodeIFDOUT(OpCodeIFDOUT),
	.WriteRegMWBOUT(WriteRegMWBOUT),
	.clk(clk),
	.crtlMuxDireccionPC(crtlMuxDireccionPC),
	.inst(inst),
	.newpc(newpc),
	.pcout(pcout),
	.reg0(reg0),
	.reg1(reg1),
	.reg2(reg2),
	.reg3(reg3),
	.reg4(reg4)
);
initial 
begin 
#100000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500000 1'b1;
	#2500000;
end 
endmodule

